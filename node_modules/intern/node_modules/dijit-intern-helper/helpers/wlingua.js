module.exports = {
    init: function(){
        return function () {
            return this.session.executeAsync(function (done) {

                window.wFindWidget = function(dp, id_parent){

                    var widget = null;

                    require([ 'dijit/registry' ], function (registry) {

                        var widgets = registry.toArray();
                        var widgetParent = null;

                        if(id_parent != null){

                            for (var i = 0; i < widgets.length; i++){
                                if(isNaN(id_parent) && i == dp){
                                    widgetParent = widgets[i];
                                    break;
                                }else{

                                    if(widgets[i].id == id_parent || widgets[i].id.indexOf(id_parent) == 0){
                                        widgetParent = widgets[i];
                                        break;
                                    }
                                }
                            }

                            if(widgetParent[dp]){
                                widget = widgetParent[dp];
                            }
                        }else{

                            for (var i = 0; i < widgets.length; i++){

                                if(isNaN(dp)){
                                    if(widgets[i].dojoAttachPoint == dp){

                                        widget = widgets[i];
                                        break;

                                    }else if(widgets[i][dp]){
                                        widget = widgets[i][dp];
                                        break;
                                    }
                                }else{
                                    if(widgets[i]){
                                        widget = widgets[i];
                                        break;
                                    }
                                }
                            }
                        }
                    });

                    return widget;

                };

                done(true);

            });
        }
    },
    nodeByDp: function (dp, id_parent) {
        return function (ignoredValue, setContext) {
            // TODO: for the next line, it is better to say this.parent or this.session ?
            return this.session.executeAsync(function (dp, id_parent, done) {

                var widget = wFindWidget(dp, id_parent);

                if (!widget || widget == null) {
                    done(new Error('Could not find widget "' + dp + '"'));
                }
                else {
                    done(widget.domNode ? widget.domNode : widget);
                }

            }, [dp, id_parent]).then(function (node) {
                return setContext(node);
            });
        };
    },
    getPropertyByDp: function (property, dp, id_parent, session) {

        return function () {

            return session.executeAsync(function (property, dp, id_parent, done) {

                var widget = wFindWidget(dp, id_parent);

                if (!widget || widget == null) {
                    done(new Error('Could not find widget "' + dp + '"'));
                }
                else {
                    done(widget[property]);
                }

            }, [property, dp, id_parent]);
        };
    },
    loadWidget: function(dp, id_parent, fn){

        var getPropertyByDp = this.getPropertyByDp;

        return function () {

            var session = this.session;

            return getPropertyByDp("id", dp, id_parent, session)().then(function(widgetId){

                fn = fn.toString();

                return session.executeAsync(function (widgetId, fn, done) {

                    function parseFn(strFn){
                        var beginFn = strFn.indexOf("{") + 1;
                        var finistFn = strFn.lastIndexOf("}");
                        var beginParam = strFn.indexOf("(") + 1;
                        var endParam = strFn.indexOf(")");
                        var strFunction = strFn.substring(beginFn, finistFn);
                        var strParam = strFn.substring(beginParam, endParam);

                        return new Function(strParam, strFunction);
                    }

                    require([ 'dijit/registry' ], function (registry) {

                        var widget = registry.byId(widgetId);

                        if (!widget) {
                            done(false);
                        } else {

                            var functionTmp = parseFn(fn);

                            done(functionTmp(widget));
                        }

                    });
                }, [widgetId, fn]);

            });
        }
    }
};
